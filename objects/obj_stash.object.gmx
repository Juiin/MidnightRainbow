<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-41</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[view_current]+view_wview[view_current];
y = view_yview[view_current];

stash_start_x = x-156;
stash_start_y = y+25; 

mouse_item = EMPTY;

mouse_in_stash = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set States
with(obj_player_parent) state_switch("Cutscene");
with(obj_camera) state_switch("Fixed Player");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_player_parent) state_switch_previous();
with(obj_camera) state_switch("Loose Player");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keep stash in view
x = view_xview[view_current]+view_wview[view_current];
y = view_yview[view_current];

stash_start_x = x-312;
stash_start_y = y+50; 

mouse_in_stash = (mouse_x &gt;= stash_start_x &amp;&amp; mouse_x &lt;= x-8 &amp;&amp; mouse_y &gt;= stash_start_y &amp;&amp; mouse_y &lt;= y+666)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Item Movement

//if mouse is somewhere inside stash
if(mouse_in_stash)
{
    if(mouse_check_button_pressed(mb_left))
    {
        if(obj_controller.stash_grid[# (mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62] != EMPTY)
        {
            if(mouse_item != EMPTY)
            {
                var temp = mouse_item;
                mouse_item = obj_controller.stash_grid[# (mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62];
                ds_grid_set(obj_controller.stash_grid,(mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62,temp);
            }
            else if(mouse_item == EMPTY)
            {
                mouse_item = obj_controller.stash_grid[# (mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62];
                ds_grid_set(obj_controller.stash_grid,(mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62,EMPTY);
            }
        }
        else if(mouse_item != EMPTY)
        {
            ds_grid_set(obj_controller.stash_grid,(mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62,mouse_item);
            mouse_item = EMPTY; 
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draw items
for(var i = 0; i &lt; 5;i++)
{
    for(var j = 0; j &lt; 10;j++)
    {
        if(obj_controller.stash_grid[# i,j] != EMPTY)
        {
            //Item sprite
            switch(ds_map_find_value(obj_controller.stash_grid[# i,j],"type"))
            {
                case "red":
                draw_sprite(spr_red_item,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case "yellow":
                draw_sprite(spr_yellow_item,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case "blue":
                draw_sprite(spr_blue_item,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case "green":
                draw_sprite(spr_green_item,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case "purple":
                draw_sprite(spr_purple_item,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
            }
            //Border Sprite
            switch(ds_map_find_value(obj_controller.stash_grid[# i,j],"rarity"))
            {
                case 1 :
                draw_sprite(spr_white_border,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case 2:
                draw_sprite(spr_blue_border,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case 3:
                draw_sprite(spr_yellow_border,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
                case 4:
                draw_sprite(spr_legendary_border,-1,stash_start_x+(62*i),stash_start_y+(62*j))
                break;
            }
            
        }
    }
}

//draw_mouse_item
if(mouse_item != EMPTY)
{
    switch(ds_map_find_value(mouse_item,"type"))
    {
        case "red":
        draw_sprite(spr_red_item,-1,mouse_x,mouse_y)
        break;
        case "yellow":
        draw_sprite(spr_yellow_item,-1,mouse_x,mouse_y)
        break;
        case "blue":
        draw_sprite(spr_blue_item,-1,mouse_x,mouse_y)
        break;
        case "green":
        draw_sprite(spr_green_item,-1,mouse_x,mouse_y)
        break;
        case "purple":
        draw_sprite(spr_purple_item,-1,mouse_x,mouse_y)
        break;
    }
    //Border Sprite
    switch(ds_map_find_value(mouse_item,"rarity"))
    {
        case 1 :
        draw_sprite(spr_white_border,-1,mouse_x,mouse_y)
        break;
        case 2:
        draw_sprite(spr_blue_border,-1,mouse_x,mouse_y)
        break;
        case 3:
        draw_sprite(spr_yellow_border,-1,mouse_x,mouse_y)
        break;
        case 4:
        draw_sprite(spr_legendary_border,-1,mouse_x,mouse_y)
        break;
    }
}


//if mouse is somewhere inside stash
if(mouse_x &gt;= stash_start_x &amp;&amp; mouse_x &lt;= x-8 &amp;&amp; mouse_y &gt;= stash_start_y &amp;&amp; mouse_y &lt;= y+666)
{
    
    //draw_text(mouse_x,mouse_y,ds_map_find_value(obj_controller.stash_grid[# (mouse_x-(x-160)) div 28, (mouse_y-y) div 28],"Stat_01"))
    if(obj_controller.stash_grid[# (mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62] != EMPTY)
    {
        /*var str = ds_map_find_value(obj_controller.stash_grid[# (mouse_x-stash_start_x) div 31, (mouse_y-stash_start_y) div 31],"Stat_1");
        
        */
        var mouse_grid_x = (mouse_x-stash_start_x) div 62;
        var mouse_grid_y = (mouse_y-stash_start_y) div 62;
        
        var str = scr_get_item_string(obj_controller.stash_grid,mouse_grid_x,mouse_grid_y,false);
        
        if(instance_exists(obj_vendor))
        {
            if(obj_vendor.show_window)
            {
                var cost = ds_map_find_value(obj_controller.stash_grid[# (mouse_x-stash_start_x) div 62, (mouse_y-stash_start_y) div 62],"cost");
                str = string_insert("# Value: "+string(round(cost/3)),str,string_length(str)+1);
            }
            
        }
        
        
        
        
        draw_set_color(c_black);
        draw_rectangle(min(mouse_x-(string_width(str)/2),x-(string_width(str))),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),min(mouse_x+(string_width(str)/2),x+(string_width(str))),min(mouse_y+(string_height(str)),view_yview[view_current]+view_hview[view_current]),false);
        draw_set_color(c_white);
        draw_text_transformed(min(mouse_x,x-(string_width(str)/2)),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),str,1,1,image_angle);
        
    }
    
    
}
//draw_text(mouse_x,mouse_y,string((mouse_x-(x-160)) div 28)+string((mouse_y-y) div 28))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
