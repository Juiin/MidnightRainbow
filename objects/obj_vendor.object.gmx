<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vendor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>obj_npc_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
open_stash = true;


shop_start_x = 0;
shop_start_y = 0;
mouse_inside_shop = false;

//Fill Shop
//how many items
item_amount = irandom_range(10,40);

max_tier = 4 //currently 0-4
max_rarity = 4 //currently 1-4

shop_grid = ds_grid_create(5,10);
ds_grid_set_region(shop_grid,0,0,4,9,EMPTY);

var y_loop;
for(var i=0;i&lt;5;i++)
{
    if(i&lt;item_amount mod 5) y_loop = floor(item_amount div 5)+1
    else y_loop = floor(item_amount div 5); 
    for(var j=0;j&lt;y_loop;j++)
    {
        ds_grid_set(shop_grid,i,j,scr_create_item(choose("blue","red","yellow","green","purple"),irandom_range(1,max_rarity),irandom(max_tier)));
    }
}

//Identified Array
for(var i=0;i&lt;5;i++)
{
    for(var j=0;j&lt;10;j++)
    {
        identified[i,j] = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
event_inherited();

shop_start_x = view_xview[view_current]+8;
shop_start_y = view_yview[view_current]+50;

mouse_inside_shop = (mouse_x &gt; shop_start_x &amp;&amp; mouse_x &lt; shop_start_x+310 &amp;&amp; mouse_y &gt; shop_start_y &amp;&amp; mouse_y &lt; shop_start_y+620);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clicking on Items
if(instance_exists(obj_stash))
{
    if(mouse_inside_shop &amp;&amp; obj_stash.mouse_item == EMPTY)
    {
        //if mouse_position in grid is not empty
        var mouse_grid_x = (mouse_x-shop_start_x) div 62;
        var mouse_grid_y = (mouse_y-shop_start_y) div 62;
        if(shop_grid[# mouse_grid_x,mouse_grid_y] != EMPTY)
        {
            if(mouse_check_button_released(mb_right))
            {
                var cost = ds_map_find_value(shop_grid[# mouse_grid_x,mouse_grid_y],"cost");
                if(identified[mouse_grid_x,mouse_grid_y] == false &amp;&amp; global.gold &gt;= cost)
                {
                    identified[mouse_grid_x,mouse_grid_y] = true;
                    global.gold-=cost;
                }
                else
                {
                    var xx = scr_first_free_slot_x(obj_controller.stash_grid);
                    var yy = scr_first_free_slot_y(obj_controller.stash_grid);
                    obj_controller.stash_grid[# xx,yy] = shop_grid[# mouse_grid_x,mouse_grid_y];
                    shop_grid[# mouse_grid_x,mouse_grid_y] = EMPTY;
                }
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selling Stash Items
if(instance_exists(obj_stash) &amp;&amp; show_window)
{
    if(mouse_x &gt;= obj_stash.stash_start_x &amp;&amp; mouse_x &lt;= obj_stash.x-8 &amp;&amp; mouse_y &gt;= obj_stash.stash_start_y &amp;&amp; mouse_y &lt;= obj_stash.y+666)
    {
        //if mouse_position in grid is not empty
        var mouse_grid_x = (mouse_x-obj_stash.stash_start_x) div 62;
        var mouse_grid_y = (mouse_y-obj_stash.stash_start_y) div 62;
        if(obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y] != EMPTY)
        {
            if(mouse_check_button_released(mb_right))
            {
                audio_play_sound(snd_gold_pickup,0,false);
                var cost = ds_map_find_value(obj_controller.stash_grid[# (mouse_x-obj_stash.stash_start_x) div 62, (mouse_y-obj_stash.stash_start_y) div 62],"cost");
                global.gold+=(round(cost/3));
                ds_map_destroy(obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y]);
                obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y] = EMPTY;
            }
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy DS
for(var i=0;i&lt;5;i++)
{
    for(var j=0;j&lt;10;j++)
    {
        if(shop_grid[# i,j] != EMPTY)
        {
            ds_map_destroy(shop_grid[# i,j]);
        }
    }
}

ds_grid_destroy(shop_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();


var blend;
if(talkable) blend = c_yellow else blend = c_white;
scr_text_outlined_scaled(x,y-16,"VENDOR",blend,c_black,1,1);


if(show_window)
{
    //draw shop_sprite
    draw_sprite(spr_vendor_shop,-1,view_xview[view_current],view_yview[view_current]);
    
    
    //draw items
    for(var i = 0;i&lt;5;i++)
    {
        for(var j=0;j&lt;10;j++)
        {
            if(shop_grid[# i,j] != EMPTY)
            {
                var blend;
                if(identified[ i,j]) blend = c_white;
                else blend = c_dkgray; 
                //Item sprite
                switch(ds_map_find_value(shop_grid[# i,j],"type"))
                {
                    case "red":
                    draw_sprite_ext(spr_red_item,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case "yellow":
                    draw_sprite_ext(spr_yellow_item,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case "blue":
                    draw_sprite_ext(spr_blue_item,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case "green":
                    draw_sprite_ext(spr_green_item,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case "purple":
                    draw_sprite_ext(spr_purple_item,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                }
                //Border Sprite
                switch(ds_map_find_value(shop_grid[# i,j],"rarity"))
                {
                    case 1 :
                    draw_sprite_ext(spr_white_border,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case 2:
                    draw_sprite_ext(spr_blue_border,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case 3:
                    draw_sprite_ext(spr_yellow_border,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                    case 4:
                    draw_sprite_ext(spr_legendary_border,-1,shop_start_x+(62*i),shop_start_y+(62*j),1,1,image_angle,blend,image_alpha)
                    break;
                }
                
            }
        }
    }
    
    //draw mouseover text
    if(mouse_inside_shop)
    {
        //if mouse_position in grid is not empty
        var mouse_grid_x = (mouse_x-shop_start_x) div 62;
        var mouse_grid_y = (mouse_y-shop_start_y) div 62;
        if(shop_grid[# mouse_grid_x,mouse_grid_y] != EMPTY)
        {
            var rarity = ds_map_find_value(shop_grid[# mouse_grid_x,mouse_grid_y],"rarity");
        
            if(identified[mouse_grid_x,mouse_grid_y] = false)
            {
                var max_tier = ds_map_find_value(shop_grid[# mouse_grid_x,mouse_grid_y],"max_tier");
                var cost = ds_map_find_value(shop_grid[# mouse_grid_x,mouse_grid_y],"cost");
                
                var str = "Unidentified # Possible Item Tier: "+string(max_tier)+"# Stat Amount: "+string(rarity)+"# Cost: "+string(cost);
            }
            else //if already ID'ed
            {
                 var str = scr_get_item_string(shop_grid,mouse_grid_x,mouse_grid_y,false);
            }
            draw_set_color(c_black);
            draw_rectangle(max(mouse_x-(string_width(str)/2),shop_start_x),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),max(mouse_x+(string_width(str)/2),shop_start_x+(string_width(str))),min(mouse_y+(string_height(str)),view_yview[view_current]+view_hview[view_current]),false)
            draw_set_color(c_white);
            draw_text_transformed(max(mouse_x,shop_start_x+(string_width(str)/2)),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),str,1,1,image_angle);
        }
    }
}


//draw_rectangle(shop_start_x,shop_start_y,shop_start_x+312,shop_start_y+616,true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
