<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_item_grid_empty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-41</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
start_x = 0;
start_y = 0;
mouse_in_grid = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keep in view
x = view_xview[view_current]+(view_wview[view_current]/2);
y = view_yview[view_current]+(view_hview[view_current]/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
start_x = x-190;
start_y = y-190;

mouse_in_grid = (mouse_x &gt; start_x &amp;&amp; mouse_x &lt; start_x+380 &amp;&amp; mouse_y &gt; start_y &amp;&amp; mouse_y &lt; start_y+380);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item Movement
if(instance_exists(obj_stash))
{
    if(mouse_in_grid)
    {
        //Left Pressed
        if(mouse_check_button_pressed(mb_left))
        {
            var mouse_grid_x = (mouse_x-start_x) div 76;
            var mouse_grid_y = (mouse_y-start_y) div 76;
            
            //Deapply Grid Stats
            scr_apply_item_grid("minus");
            
            //Move Stuff Around
            if(item_grid[# mouse_grid_x, mouse_grid_y] != EMPTY)
            {
                if(obj_stash.mouse_item != EMPTY)
                {
                    var temp = obj_stash.mouse_item;
                    obj_stash.mouse_item = item_grid[# mouse_grid_x, mouse_grid_y];
                    item_grid[# mouse_grid_x, mouse_grid_y] = temp;
                }
                else if(obj_stash.mouse_item == EMPTY)
                {
                    obj_stash.mouse_item = item_grid[# mouse_grid_x, mouse_grid_y];
                    item_grid[# mouse_grid_x, mouse_grid_y] = EMPTY;
                }
            }
            else if(obj_stash.mouse_item != EMPTY)
            {
                item_grid[# mouse_grid_x, mouse_grid_y] = obj_stash.mouse_item;
                obj_stash.mouse_item = EMPTY;
            }
            
            //Recalc Borders and Apply Grid Stats
            scr_calc_borders();
            scr_apply_item_grid("plus");
        }
        else if(mouse_check_button_pressed(mb_right)) //Else Right Pressed
        {
            var mouse_grid_x = (mouse_x-start_x) div 76;
            var mouse_grid_y = (mouse_y-start_y) div 76;
            
            //Deapply Grid Stats
            scr_apply_item_grid("minus");
            
            //Move Stuff Around
            if(item_grid[# mouse_grid_x, mouse_grid_y] != EMPTY)
            {
                var xx = scr_first_free_slot_x(obj_controller.stash_grid);
                var yy = scr_first_free_slot_y(obj_controller.stash_grid);
                
                obj_controller.stash_grid[# xx,yy] = item_grid[# mouse_grid_x,mouse_grid_y];
                item_grid[# mouse_grid_x,mouse_grid_y] = EMPTY;
            }
            //Recalc Borders and Apply Grid Stats
            scr_calc_borders();
            scr_apply_item_grid("plus");
        }
        
    }
    else if(obj_stash.mouse_in_stash)
    {
        if(mouse_check_button_pressed(mb_right))
        {
            var mouse_grid_x = (mouse_x-obj_stash.stash_start_x) div 62;
            var mouse_grid_y = (mouse_y-obj_stash.stash_start_y) div 62;
            
            //Deapply Grid Stats
            scr_apply_item_grid("minus");
            
            if(obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y] != EMPTY)
            {
                var xx = scr_first_free_slot_x(item_grid);
                var yy = scr_first_free_slot_y(item_grid);
                
                item_grid[# xx,yy] = obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y];
                obj_controller.stash_grid[# mouse_grid_x,mouse_grid_y] = EMPTY;
            }
            
            //Recalc Borders and Apply Grid Stats
            scr_calc_borders();
            scr_apply_item_grid("plus");
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draw borders(grid_borders based on color alignments) not borders of the items
for(var i=0;i&lt;5;i++)
{
    for(var j=0;j&lt;5;j++)
    {
        draw_sprite(spr_border,border_grid[# i,j],start_x+(76*i),start_y+(76*j));
    }
}

//draw items
for(var i = 0; i &lt; 5;i++)
{
    for(var j = 0; j &lt; 5;j++)
    {
        if(item_grid[# i,j] != EMPTY)
        {
        
            var start_x_new = start_x+10;
            var start_y_new = start_y+10;
            //Item sprite
            switch(ds_map_find_value(item_grid[# i,j],"type"))
            {
                case "red":
                draw_sprite(spr_red_item,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case "yellow":
                draw_sprite(spr_yellow_item,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case "blue":
                draw_sprite(spr_blue_item,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case "green":
                draw_sprite(spr_green_item,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case "purple":
                draw_sprite(spr_purple_item,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
            }
            //Border Sprite
            switch(ds_map_find_value(item_grid[# i,j],"rarity"))
            {
                case 1 :
                draw_sprite(spr_white_border,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case 2:
                draw_sprite(spr_blue_border,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case 3:
                draw_sprite(spr_yellow_border,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
                case 4:
                draw_sprite(spr_legendary_border,-1,start_x_new+(76*i),start_y_new+(76*j))
                break;
            }
            
        }
    }
}

//draw mouseover text
if(mouse_in_grid)
{
    //if mouse_position in grid is not empty
    var mouse_grid_x = (mouse_x-start_x) div 76;
    var mouse_grid_y = (mouse_y-start_y) div 76;
    if(item_grid[# mouse_grid_x,mouse_grid_y] != EMPTY)
    {
        var str = scr_get_item_string(item_grid,mouse_grid_x,mouse_grid_y,true);

        draw_set_color(c_black);
        draw_rectangle(max(mouse_x-(string_width(str)/2),start_x),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),max(mouse_x+(string_width(str)/2),start_x+(string_width(str))),min(mouse_y+(string_height(str)),view_yview[view_current]+view_hview[view_current]),false)
        draw_set_color(c_white);
        
        var in_col = c_white;
        var out_col = scr_border_color(border_grid[# mouse_grid_x,mouse_grid_y]);
        scr_text_outlined_scaled(max(mouse_x,start_x+(string_width(str)/2)),min(mouse_y,view_yview[view_current]+view_hview[view_current]-string_height(str)),str,in_col,out_col,1,1);
    }
}

var offense_gs = 0;
var defense_gs = 0;
var utility_gs = 0;
var total_gs = 0;

//Draw Gearscore

//Get GS Variables
for(i=0;i&lt;ds_grid_width(item_grid);i++)
{
    for(j=0;j&lt;ds_grid_height(item_grid);j++)
    {
        if(item_grid[# i,j] != EMPTY)
        {
            var rarity = ds_map_find_value(item_grid[# i,j],"rarity");
            
            for(var k = 0;k&lt;rarity;k++)
            {
                var stat_type = ds_map_find_value(item_grid[# i,j],"Stat_"+string(k)+"_type");
                var stat_value = ds_map_find_value(item_grid[# i,j],"Stat_"+string(k)+"_value");
                stat_value=(stat_value*(1+((border_grid[# i,j])*0.25)));
                
                
                if(stat_type == "Damage" || stat_type == "Critical Damage" || stat_type == "Critical Chance" || stat_type == "Attack Speed")
                {
                    offense_gs += scr_gear_score_stat(stat_type,stat_value);
                }
                else if(stat_type == "Defense" || stat_type == "Stun Recovery" || stat_type == "Health" || stat_type == "Health %")
                {
                    defense_gs += scr_gear_score_stat(stat_type,stat_value);
                }
                else if(stat_type == "Cooldown Reduction" || stat_type == "Movement Speed" || stat_type == "Pickup Radius")
                {
                    utility_gs += scr_gear_score_stat(stat_type,stat_value);
                }
            }
        }           
    }
}

//Draw Total GS
draw_set_halign(fa_left);

var gs_string = "Total Gear Score: "+string(round(offense_gs+defense_gs+utility_gs))
scr_text_outlined_scaled(start_x,start_y-60,gs_string,c_white,c_black,1,1)


//Draw Individual GS by Popup
mouse_in_gs = (mouse_x &gt; start_x &amp;&amp; mouse_x &lt; start_x+string_width(gs_string) &amp;&amp; mouse_y &gt; start_y-60 &amp;&amp; mouse_y &lt; start_y-60+string_height(gs_string));

var pop_gs_string = "Offense Gear Score: "+string(round(offense_gs))+"#Defense Gear Score: "+string(round(defense_gs))+"#Utility Gear Score: "+string(round(utility_gs));

if(mouse_in_gs)
{
    draw_set_color(c_black);
    draw_rectangle(start_x,start_y-30,start_x+string_width(pop_gs_string),start_y-30+string_height(pop_gs_string),false);
    draw_set_color(c_white);
    
    draw_text(start_x,start_y-30,pop_gs_string);
}
draw_set_halign(fa_center); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
