<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state_machine_init();
state_create("Normal",st_ov_normal);
state_create("Scout",st_ov_scout);
state_create("Warp",st_ov_warp);
state_start("Normal");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
player_x = 0;
player_y = 0;
scout_radius = 180;
warp_radius = 5;

wview = 1280;
hview = 720;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state_cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state_execute();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Pos in Grid
for(var i=0;i&lt;ds_grid_width(ov_grid);i++)
{
    for(var j=0;j&lt;ds_grid_height(ov_grid);j++)
    {
        if(ds_map_find_value(ov_grid[# i,j],"player"))
        {
            player_x = i;
            player_y = j;
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reveal
scr_ov_reveal(player_x,player_y,1);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
state_cleanup();
io_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate Player

if(instance_exists(obj_player_parent))
{
    instance_deactivate_object(obj_player_parent);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
if(instance_exists(obj_camera))
{
    if(obj_camera.state_name != "Overworld")
    {
        with(obj_camera)
        {
            state_switch("Overworld");
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_overworld_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
for(var i=0;i&lt;ds_grid_width(ov_grid);i++)
{
    for(var j=0;j&lt;ds_grid_height(ov_grid);j++)
    {
    
        //Draw Sprites
        if(ds_map_find_value(ov_grid[# i,j],"id") != EMPTY &amp;&amp; ds_map_find_value(ov_grid[# i,j],"revealed"))
        {
            var blend;
            if(ds_map_find_value(ov_grid[# i,j],"clear")) blend=c_dkgray;
            else blend = c_white;
            
            draw_sprite_ext(ds_map_find_value(ov_grid[# i,j],"sprite"),-1,i*64,j*64,1,1,image_angle,blend,image_alpha);
        }
        //Draw Player
        if(ds_map_find_value(ov_grid[# i,j],"player"))
        {
            draw_sprite(spr_player,-1,(i*64)+32,(j*64)+32);
        }                                    
    }                                            
}
//State specific stuff
//Draw Marker over moveable mouse position
if(state_name == "Normal")
{
    if(mouse_x &gt; (player_x-1)*64 &amp;&amp; mouse_x &lt; (player_x+2)*64 &amp;&amp; mouse_y &gt; (player_y-1)*64 &amp;&amp; mouse_y &lt; (player_y+2)*64)
    {
        var mouse_xx = mouse_x div 64;
        var mouse_yy = mouse_y div 64;
        
        if(ds_map_find_value(ov_grid[# mouse_xx,mouse_yy],"moveable"))
        {
            draw_sprite(spr_ov_moveable,-1,mouse_xx*64,mouse_yy*64);
        }
    }
}
else if(state_name == "Scout")
{
    draw_circle(mouse_x,mouse_y,scout_radius,true);
}
else if(state_name == "Warp")
{
    for(var i=0;i&lt;ds_grid_width(ov_grid);i++)
    {
        for(var j=0;j&lt;ds_grid_height(ov_grid);j++)
        {
            if(ds_map_find_value(ov_grid[# i,j],"moveable"))
            {
                if(point_in_rectangle(i*64+32,j*64+32,(player_x-warp_radius)*64,(player_y-warp_radius)*64,(player_x+warp_radius+1)*64,(player_y+warp_radius+1)*64))
                {
                    draw_sprite_ext(spr_ov_moveable,-1,i*64,j*64,1,1,image_angle,image_blend,0.5);
                }
            } 
        }
    }
    
    //Draw Marker
    if(mouse_x &gt; (player_x-warp_radius)*64 &amp;&amp; mouse_x &lt; (player_x+warp_radius+1)*64 &amp;&amp; mouse_y &gt; (player_y-warp_radius)*64 &amp;&amp; mouse_y &lt; (player_y+warp_radius+1)*64)
    {
        var mouse_xx = mouse_x div 64;
        var mouse_yy = mouse_y div 64;
        
        if(ds_map_find_value(ov_grid[# mouse_xx,mouse_yy],"moveable"))
        {
            draw_sprite(spr_ov_moveable,-1,mouse_xx*64,mouse_yy*64);
        }
    }
}

//draw_rectangle((player_x-warp_radius)*64,(player_y-warp_radius)*64,(player_x+warp_radius+1)*64,(player_y+warp_radius+1)*64,true);



/*
//Draw Possible Move Options
for(var i=player_x-1;i&lt;=player_x+1;i++)
{
    for(var j=player_y-1;j&lt;=player_y+1;j++)
    {
        if(ds_map_find_value(ov_grid[# i,j],"moveable") &amp;&amp; (player_x != i || player_y != j))
        {
            draw_sprite_ext(spr_ov_moveable,-1,i*64,j*64,1,1,image_angle,image_blend,0.5);
        }
    }
}
*/
//draw_rectangle((player_x-1)*64,(player_y-1)*64,(player_x+2)*64,(player_y+2)*64,true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug)
{
    draw_text(view_xview[0]+50,view_yview[0]+50,string(view_wview[0]))
    draw_text(view_xview[0]+50,view_yview[0]+70,string(view_hview[0]));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
